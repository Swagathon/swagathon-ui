/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/HyKGtQqABIt
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo } from "react"
import { Input } from "@/components/ui/input"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuRadioGroup, DropdownMenuRadioItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"
import { Avatar, AvatarImage, AvatarFallback } from "@/components/ui/avatar"
import { Pagination } from "@/components/ui/pagination"

export function RatingsDataTable() {
  const [search, setSearch] = useState("")
  const [sort, setSort] = useState({ key: "name", order: "asc" })
  const [page, setPage] = useState(1)
  const [pageSize, setPageSize] = useState(10)
  const users = useMemo(() => {
    return [
      {
        id: 1,
        name: "John Doe",
        email: "john@example.com",
        role: "Admin",
        avatar: "/placeholder-user.jpg",
        num1: 123,
        num2: 456,
        num3: 789,
        num4: 987,
        num5: 654,
      },
      {
        id: 2,
        name: "Jane Smith",
        email: "jane@example.com",
        role: "Editor",
        avatar: "/placeholder-user.jpg",
        num1: 321,
        num2: 654,
        num3: 987,
        num4: 0,
        num5: 753,
      },
      {
        id: 3,
        name: "Bob Johnson",
        email: "bob@example.com",
        role: "User",
        avatar: "/placeholder-user.jpg",
        num1: 159,
        num2: 753,
        num3: 357,
        num4: null,
        num5: 357,
      },
      {
        id: 4,
        name: "Alice Williams",
        email: "alice@example.com",
        role: "Admin",
        avatar: "/placeholder-user.jpg",
        num1: 951,
        num2: 357,
        num3: 159,
        num4: 753,
        num5: 951,
      },
      {
        id: 5,
        name: "Tom Davis",
        email: "tom@example.com",
        role: "Editor",
        avatar: "/placeholder-user.jpg",
        num1: 753,
        num2: 951,
        num3: 753,
        num4: 951,
        num5: 753,
      },
      {
        id: 6,
        name: "Sarah Lee",
        email: "sarah@example.com",
        role: "User",
        avatar: "/placeholder-user.jpg",
        num1: 357,
        num2: 159,
        num3: 951,
        num4: 753,
        num5: 357,
      },
      {
        id: 7,
        name: "Michael Brown",
        email: "michael@example.com",
        role: "Admin",
        avatar: "/placeholder-user.jpg",
        num1: 951,
        num2: 753,
        num3: 357,
        num4: 159,
        num5: 951,
      },
      {
        id: 8,
        name: "Emily Wilson",
        email: "emily@example.com",
        role: "Editor",
        avatar: "/placeholder-user.jpg",
        num1: 753,
        num2: 951,
        num3: 753,
        num4: 951,
        num5: 753,
      },
      {
        id: 9,
        name: "David Anderson",
        email: "david@example.com",
        role: "User",
        avatar: "/placeholder-user.jpg",
        num1: 357,
        num2: 159,
        num3: 951,
        num4: 753,
        num5: 357,
      },
      {
        id: 10,
        name: "Olivia Taylor",
        email: "olivia@example.com",
        role: "Admin",
        avatar: "/placeholder-user.jpg",
        num1: 951,
        num2: 753,
        num3: 357,
        num4: 159,
        num5: 951,
      },
      {
        id: 11,
        name: "Christopher Martinez",
        email: "christopher@example.com",
        role: "Editor",
        avatar: "/placeholder-user.jpg",
        num1: 753,
        num2: 951,
        num3: 753,
        num4: 951,
        num5: 753,
      },
      {
        id: 12,
        name: "Isabella Hernandez",
        email: "isabella@example.com",
        role: "User",
        avatar: "/placeholder-user.jpg",
        num1: 357,
        num2: 159,
        num3: 951,
        num4: 753,
        num5: 357,
      },
    ]
      .filter((user) => {
        const searchValue = search.toLowerCase()
        return (
          user.name.toLowerCase().includes(searchValue) ||
          user.email.toLowerCase().includes(searchValue) ||
          user.role.toLowerCase().includes(searchValue)
        )
      })
      .sort((a, b) => {
        if (sort.order === "asc") {
          return a[sort.key] > b[sort.key] ? 1 : -1
        } else {
          return a[sort.key] < b[sort.key] ? 1 : -1
        }
      })
      .slice((page - 1) * pageSize, page * pageSize)
  }, [search, sort, page, pageSize])
  const handleSort = (key) => {
    if (sort.key === key) {
      setSort({ key, order: sort.order === "asc" ? "desc" : "asc" })
    } else {
      setSort({ key, order: "asc" })
    }
  }
  const handlePageChange = (page) => {
    setPage(page)
  }
  const handlePageSizeChange = (size) => {
    setPageSize(size)
    setPage(1)
  }
  return (
    <div className="flex flex-col gap-4">
      <div className="flex items-center justify-between">
        <Input
          placeholder="Search users..."
          className="bg-white dark:bg-gray-950"
          value={search}
          onChange={(e) => setSearch(e.target.value)}
        />
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="outline" className="shrink-0">
              <ArrowUpDownIcon className="w-4 h-4 mr-2" />
              {`${pageSize} per page`}
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent className="w-[200px]" align="end">
            <DropdownMenuRadioGroup value={pageSize.toString()}>
              <DropdownMenuRadioItem value="10">10 per page</DropdownMenuRadioItem>
              <DropdownMenuRadioItem value="20">20 per page</DropdownMenuRadioItem>
              <DropdownMenuRadioItem value="50">50 per page</DropdownMenuRadioItem>
              <DropdownMenuRadioItem value="100">100 per page</DropdownMenuRadioItem>
            </DropdownMenuRadioGroup>
          </DropdownMenuContent>
        </DropdownMenu>
      </div>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="cursor-pointer" onClick={() => handleSort("name")}>
              Name
              {sort.key === "name" && <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
            <TableHead className="cursor-pointer" onClick={() => handleSort("email")}>
              Email
              {sort.key === "email" && <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
            <TableHead className="cursor-pointer" onClick={() => handleSort("role")}>
              Role
              {sort.key === "role" && <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
            <TableHead className="cursor-pointer text-right" onClick={() => handleSort("num1")}>
              Number 1
              {sort.key === "num1" && <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
            <TableHead className="cursor-pointer text-right" onClick={() => handleSort("num2")}>
              Number 2
              {sort.key === "num2" && <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
            <TableHead className="cursor-pointer text-right" onClick={() => handleSort("num3")}>
              Number 3
              {sort.key === "num3" && <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
            <TableHead className="cursor-pointer text-right" onClick={() => handleSort("num4")}>
              Number 4
              {sort.key === "num4" && <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
            <TableHead className="cursor-pointer text-right" onClick={() => handleSort("num5")}>
              Number 5
              {sort.key === "num5" && <span className="ml-1">{sort.order === "asc" ? "\u2191" : "\u2193"}</span>}
            </TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {users.map((user) => (
            <TableRow key={user.id}>
              <TableCell className="flex items-center gap-2">
                <Avatar className="w-8 h-8 border">
                  <img src="/placeholder.svg" alt={user.name} />
                  <AvatarFallback>{user.name.charAt(0).toUpperCase()}</AvatarFallback>
                </Avatar>
                {user.name}
              </TableCell>
              <TableCell>{user.email}</TableCell>
              <TableCell>{user.role}</TableCell>
              <TableCell className="text-right">{user.num1 || "-"}</TableCell>
              <TableCell className="text-right">{user.num2 || "-"}</TableCell>
              <TableCell className="text-right">{user.num3 || "-"}</TableCell>
              <TableCell className="text-right">{user.num4 || "-"}</TableCell>
              <TableCell className="text-right">{user.num5 || "-"}</TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
      <div className="flex items-center justify-between">
        <Pagination
          currentPage={page}
          totalPages={Math.ceil(users.length / pageSize)}
          onPageChange={handlePageChange}
        />
      </div>
    </div>
  )
}

function ArrowUpDownIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="m21 16-4 4-4-4" />
      <path d="M17 20V4" />
      <path d="m3 8 4-4 4 4" />
      <path d="M7 4v16" />
    </svg>
  )
}
